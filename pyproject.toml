[tool.poetry]
name = "gate-access-controller"
version = "0.1.0"
description = "A secure gate access controller with temporary link management"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "app", from = "backend"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.116.0"
uvicorn = {extras = ["standard"], version = "^0.34.0"}
pydantic = "^2.10.3"
pydantic-settings = "^2.6.1"
sqlalchemy = "^2.0.36"
alembic = "^1.14.0"
asyncpg = "^0.30.0"
psycopg2-binary = "^2.9.10"
aiosqlite = "^0.20.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.20"
httpx = "^0.28.1"
sentry-sdk = {extras = ["fastapi"], version = "^2.19.2"}
python-dotenv = "^1.0.1"
structlog = "^24.4.0"
tenacity = "^9.0.0"
pytz = "^2024.2"
nanoid = "^2.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
pytest-asyncio = "^0.25.0"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
black = "^24.10.0"
ruff = "^0.8.3"
mypy = "^1.13.0"
pre-commit = "^4.0.1"
ipython = "^8.30.0"
rich = "^13.9.4"
httpx = "^0.28.1"
faker = "^34.0.0"
factory-boy = "^3.3.1"
pytest-env = "^1.1.5"
pytest-xdist = "^3.6.1"
coverage = {extras = ["toml"], version = "^7.6.9"}

[tool.poetry.scripts]
start = "backend.scripts.start:main"
migrate = "backend.scripts.migrate:main"
seed = "backend.scripts.seed:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
fix = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "sqlalchemy"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
no_implicit_optional = true
check_untyped_defs = true
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_unimported = false
disallow_untyped_decorators = true
no_implicit_reexport = true
strict = true

[tool.pytest.ini_options]
testpaths = ["backend/tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=backend/app",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:backend/htmlcov",
    "--cov-report=xml:backend/coverage.xml",
    "-vv",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks unit tests",
    "integration: marks integration tests",
    "e2e: marks end-to-end tests",
]

[tool.coverage.run]
source = ["backend/app"]
branch = true

[tool.coverage.report]
fail_under = 0
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]