"""Add notification provider support

Revision ID: 3b1975444667
Revises: cd3ba1fe957c
Create Date: 2025-10-24 14:20:59.037630

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision: str = "3b1975444667"
down_revision: str | None = "cd3ba1fe957c"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def column_exists(table_name: str, column_name: str) -> bool:
    """Check if a column exists in a table"""
    try:
        bind = op.get_bind()
        inspector = inspect(bind)
        columns = [col['name'] for col in inspector.get_columns(table_name)]
        return column_name in columns
    except Exception:
        return False


def table_exists(table_name: str) -> bool:
    """Check if a table exists"""
    try:
        bind = op.get_bind()
        inspector = inspect(bind)
        return table_name in inspector.get_table_names()
    except Exception:
        return False


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create notification_providers table if it doesn't exist
    if not table_exists("notification_providers"):
        op.create_table(
            "notification_providers",
            sa.Column(
                "name",
                sa.String(length=200),
                nullable=False,
                comment="Friendly name for this notification provider",
            ),
            sa.Column(
                "provider_type",
                sa.String(length=20),
                nullable=False,
                comment="Type of notification provider (pushover, webhook)",
            ),
            sa.Column(
                "config", sa.JSON(), nullable=False, comment="Provider-specific configuration as JSON"
            ),
            sa.Column(
                "enabled", sa.Boolean(), nullable=False, comment="Whether this provider is enabled"
            ),
            sa.Column("is_deleted", sa.Boolean(), nullable=False, comment="Soft delete flag"),
            sa.Column(
                "deleted_at",
                sa.DateTime(timezone=True),
                nullable=True,
                comment="Timestamp when the provider was deleted",
            ),
            sa.Column("id", sa.String(length=36), nullable=False),
            sa.Column(
                "created_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("(CURRENT_TIMESTAMP)"),
                nullable=False,
            ),
            sa.Column(
                "updated_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("(CURRENT_TIMESTAMP)"),
                nullable=False,
            ),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(
            op.f("ix_notification_providers_enabled"),
            "notification_providers",
            ["enabled"],
            unique=False,
        )
        op.create_index(
            op.f("ix_notification_providers_is_deleted"),
            "notification_providers",
            ["is_deleted"],
            unique=False,
        )
        op.create_index(
            op.f("ix_notification_providers_provider_type"),
            "notification_providers",
            ["provider_type"],
            unique=False,
        )

    # Create link_notification_providers table if it doesn't exist
    if not table_exists("link_notification_providers"):
        op.create_table(
            "link_notification_providers",
            sa.Column("link_id", sa.String(length=36), nullable=False),
            sa.Column("provider_id", sa.String(length=36), nullable=False),
            sa.ForeignKeyConstraint(["link_id"], ["access_links.id"], ondelete="CASCADE"),
            sa.ForeignKeyConstraint(["provider_id"], ["notification_providers.id"], ondelete="CASCADE"),
            sa.PrimaryKeyConstraint("link_id", "provider_id"),
        )
    # Use batch operations for SQLite compatibility
    with op.batch_alter_table("access_links", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=sa.VARCHAR(length=8),
            type_=sa.String(length=20),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "purpose",
            existing_type=sa.VARCHAR(length=18),
            type_=sa.String(length=30),
            existing_nullable=False,
        )

    with op.batch_alter_table("access_logs", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=sa.VARCHAR(length=7),
            type_=sa.String(length=20),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "denial_reason",
            existing_type=sa.VARCHAR(length=17),
            type_=sa.String(length=30),
            existing_nullable=True,
        )

    with op.batch_alter_table("audit_logs", schema=None) as batch_op:
        batch_op.drop_index("ix_audit_logs_action_created_at")
        batch_op.drop_index("ix_audit_logs_created_at")
        batch_op.drop_index("ix_audit_logs_resource_type_resource_id")
        batch_op.drop_index("ix_audit_logs_user_email")
        batch_op.create_index(batch_op.f("ix_audit_logs_user_name"), ["user_name"], unique=False)

    # Add columns only if they don't exist
    columns_to_add = []

    if not column_exists("system_settings", "oidc_scopes"):
        columns_to_add.append(
            sa.Column(
                "oidc_scopes",
                sa.String(length=500),
                nullable=True,
                comment="OIDC Scopes (comma-separated)",
            )
        )

    if not column_exists("system_settings", "default_notification_provider_ids"):
        columns_to_add.append(
            sa.Column(
                "default_notification_provider_ids",
                sa.JSON(),
                nullable=False,
                server_default='[]',
                comment="Default notification provider IDs for new links",
            )
        )

    if not column_exists("system_settings", "quick_link_notification_provider_ids"):
        columns_to_add.append(
            sa.Column(
                "quick_link_notification_provider_ids",
                sa.JSON(),
                nullable=False,
                server_default='[]',
                comment="Notification provider IDs for quick links",
            )
        )

    # Add the columns that don't exist
    if columns_to_add:
        with op.batch_alter_table("system_settings", schema=None) as batch_op:
            for column in columns_to_add:
                batch_op.add_column(column)

    # Alter existing columns
    with op.batch_alter_table("system_settings", schema=None) as batch_op:
        batch_op.alter_column(
            "oidc_issuer",
            existing_type=sa.TEXT(),
            type_=sa.String(length=500),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "oidc_client_id",
            existing_type=sa.VARCHAR(length=200),
            type_=sa.String(length=255),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "oidc_client_secret",
            existing_type=sa.VARCHAR(length=500),
            type_=sa.Text(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "oidc_redirect_uri",
            existing_type=sa.TEXT(),
            type_=sa.String(length=500),
            existing_nullable=True,
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Use batch operations for SQLite compatibility
    with op.batch_alter_table("system_settings", schema=None) as batch_op:
        batch_op.alter_column(
            "oidc_redirect_uri",
            existing_type=sa.String(length=500),
            type_=sa.TEXT(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "oidc_client_secret",
            existing_type=sa.Text(),
            type_=sa.VARCHAR(length=500),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "oidc_client_id",
            existing_type=sa.String(length=255),
            type_=sa.VARCHAR(length=200),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "oidc_issuer",
            existing_type=sa.String(length=500),
            type_=sa.TEXT(),
            existing_nullable=True,
        )
        batch_op.drop_column("quick_link_notification_provider_ids")
        batch_op.drop_column("default_notification_provider_ids")
        batch_op.drop_column("oidc_scopes")

    with op.batch_alter_table("audit_logs", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_audit_logs_user_name"))
        batch_op.create_index("ix_audit_logs_user_email", ["user_name"], unique=False)
        batch_op.create_index(
            "ix_audit_logs_resource_type_resource_id",
            ["resource_type", "resource_id"],
            unique=False,
        )
        batch_op.create_index("ix_audit_logs_created_at", ["created_at"], unique=False)
        batch_op.create_index(
            "ix_audit_logs_action_created_at", ["action", "created_at"], unique=False
        )

    with op.batch_alter_table("access_logs", schema=None) as batch_op:
        batch_op.alter_column(
            "denial_reason",
            existing_type=sa.String(length=30),
            type_=sa.VARCHAR(length=17),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "status",
            existing_type=sa.String(length=20),
            type_=sa.VARCHAR(length=7),
            existing_nullable=False,
        )

    with op.batch_alter_table("access_links", schema=None) as batch_op:
        batch_op.alter_column(
            "purpose",
            existing_type=sa.String(length=30),
            type_=sa.VARCHAR(length=18),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "status",
            existing_type=sa.String(length=20),
            type_=sa.VARCHAR(length=8),
            existing_nullable=False,
        )

    op.drop_table("link_notification_providers")
    op.drop_index(
        op.f("ix_notification_providers_provider_type"), table_name="notification_providers"
    )
    op.drop_index(op.f("ix_notification_providers_is_deleted"), table_name="notification_providers")
    op.drop_index(op.f("ix_notification_providers_enabled"), table_name="notification_providers")
    op.drop_table("notification_providers")
    # ### end Alembic commands ###
