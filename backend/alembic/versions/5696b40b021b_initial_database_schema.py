"""Initial database schema

Revision ID: 5696b40b021b
Revises:
Create Date: 2025-10-22 02:50:53.838713

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "5696b40b021b"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # NOTE: Using String instead of Enum for better cross-database compatibility
    # and easier migrations
    op.create_table(
        "access_links",
        sa.Column(
            "link_code",
            sa.String(length=50),
            nullable=False,
            comment="Unique code used to access the link",
        ),
        sa.Column(
            "status", sa.String(length=20), nullable=False, comment="Current status of the link"
        ),
        sa.Column(
            "active_on",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Date/time when the link becomes active",
        ),
        sa.Column(
            "expiration",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Date/time when the link expires",
        ),
        sa.Column(
            "name", sa.String(length=200), nullable=False, comment="Friendly name for the link"
        ),
        sa.Column("notes", sa.Text(), nullable=True, comment="Additional notes or instructions"),
        sa.Column(
            "purpose", sa.String(length=30), nullable=False, comment="Purpose category for the link"
        ),
        sa.Column(
            "granted_count",
            sa.Integer(),
            nullable=False,
            comment="Number of times access was granted",
        ),
        sa.Column(
            "denied_count",
            sa.Integer(),
            nullable=False,
            comment="Number of times access was denied",
        ),
        sa.Column(
            "max_uses",
            sa.Integer(),
            nullable=True,
            comment="Maximum number of uses allowed (null = unlimited)",
        ),
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("link_code", name="uq_access_links_link_code"),
    )
    op.create_index(
        op.f("ix_access_links_expiration"), "access_links", ["expiration"], unique=False
    )
    op.create_index(op.f("ix_access_links_link_code"), "access_links", ["link_code"], unique=True)
    op.create_index(op.f("ix_access_links_status"), "access_links", ["status"], unique=False)
    op.create_table(
        "access_logs",
        sa.Column(
            "link_id",
            sa.String(length=36),
            nullable=True,
            comment="Reference to the access link used",
        ),
        sa.Column(
            "status", sa.String(length=20), nullable=False, comment="Status of the access attempt"
        ),
        sa.Column(
            "ip_address",
            sa.String(length=45),
            nullable=False,
            comment="IP address of the requester",
        ),
        sa.Column(
            "user_agent", sa.Text(), nullable=True, comment="User agent string from the request"
        ),
        sa.Column(
            "denial_reason",
            sa.String(length=30),
            nullable=True,
            comment="Reason for denial if access was denied",
        ),
        sa.Column(
            "error_message", sa.Text(), nullable=True, comment="Error message if an error occurred"
        ),
        sa.Column(
            "link_code_used",
            sa.String(length=50),
            nullable=True,
            comment="The link code that was attempted",
        ),
        sa.Column(
            "webhook_response_time_ms",
            sa.Integer(),
            nullable=True,
            comment="Time taken for webhook response in milliseconds",
        ),
        sa.Column(
            "country",
            sa.String(length=2),
            nullable=True,
            comment="Country code from IP geolocation",
        ),
        sa.Column(
            "region",
            sa.String(length=100),
            nullable=True,
            comment="Region/state from IP geolocation",
        ),
        sa.Column("city", sa.String(length=100), nullable=True, comment="City from IP geolocation"),
        sa.Column(
            "accessed_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp of the access attempt",
        ),
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["link_id"], ["access_links.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_access_logs_accessed_at"), "access_logs", ["accessed_at"], unique=False
    )
    op.create_index(op.f("ix_access_logs_ip_address"), "access_logs", ["ip_address"], unique=False)
    op.create_index(op.f("ix_access_logs_link_id"), "access_logs", ["link_id"], unique=False)
    op.create_index(op.f("ix_access_logs_status"), "access_logs", ["status"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_access_logs_status"), table_name="access_logs")
    op.drop_index(op.f("ix_access_logs_link_id"), table_name="access_logs")
    op.drop_index(op.f("ix_access_logs_ip_address"), table_name="access_logs")
    op.drop_index(op.f("ix_access_logs_accessed_at"), table_name="access_logs")
    op.drop_table("access_logs")
    op.drop_index(op.f("ix_access_links_status"), table_name="access_links")
    op.drop_index(op.f("ix_access_links_link_code"), table_name="access_links")
    op.drop_index(op.f("ix_access_links_expiration"), table_name="access_links")
    op.drop_table("access_links")
    # ### end Alembic commands ###
